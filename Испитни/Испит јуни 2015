
ТЕРМИН 1
1.
UNIX команди
а) (5 поени) Напишете UNIX команда со која ќе ги прикажете сите детали за најавувањата на корисници кои се случиле во текот на вчерашниот ден среда, 17 јуни. Командата снимете ја во датотека за3а-11.sh., во вашиот 
домашен именик на н серверот.
6) (10 поени) Напишете UNIX команда со која ќе ги прикажете корисничките имиња на корисниците кои имаат тековно активни процеси, стартувани во тек на 10:00 часот (10:00-10:59), листата да биде нумерички сортирана и 
да не содржи дупликати Командата снимете ја во датотека zаd3b-11.ch, во вашиот домашен именик на os finki skin серверот.
Your solution file
а)nano ~/za3a-11.sh
chmod +x ~/za3a-11.sh 
last|grep "Wed Jun 17"
6) nano ~/za3b-11.sh
chmod +x ~/za3b-11.sh 
ps -eo user,lstart| grep "10:"|awk '{print $1}'|sort|uniq

2.
UNIX командна процедура
(25 поени) Да се напише командна процедура која во даден именик (прв аргумент) и сите негови подименици рекурзивно кети пронајде сите датотеки модифицирани на даден датум (втор аргумент). За секоја од пронајдените 
датотеки треба да се провери дали во содржината има структура за повторување и истата да се искоментира. Да се зачуваат овие измени во самата датотека
Направете проверка дали се проследени потребните аргументи и доколку не се, прикажете соодветно упатство за употреба. Доколку изворниот именик не постои, скриптата треба да го извести корисникот за тоа и да заврши неуспешно. Да се внимава вториот аргумент на скриптата да биде во форматот кој што се користи за датум при детално листање на именици (на пример: Jun 18).
Командната процедура снимете ја под името zad4-11.sh. во вашиот домашен именик на os. Fink серверот.
Your solution file
#!/bin/bash
if [ $# -ne 2 ];then
echo "USAGE: directory date"
exit 1
fi

DIRECTORY=$1
MOD_DATE=$2

if [ ! -d "$DIRECTORY" ]; then
    echo "Error: Directory '$DIRECTORY' does not exist."
    exit 1
fi

FILES=$(find "$DIRECTORY" -type f -newermt "$MOD_DATE 00:00:00" ! -newermt "$MOD_DATE 23:59:59")

if [ -z "$FILES" ]; then
    echo "No files found modified on $MOD_DATE."
    exit 0
fi

comment_repeating_lines() {
    local file=$1
    awk '
    {
        count[$0]++
        if (count[$0] > 1) {
            print "# " $0
        } else {
            print $0
        }
    }' "$file" > "${file}.tmp" && mv "${file}.tmp" "$file"
}

for file in $FILES; do
    echo "Processing: $file"
    comment_repeating_lines "$file"
done

echo "Processing complete."

exit 0


3.
Java I/O
(30 поени) Напишете ги следните методи кои работат со бинарната датотека apt. dat. Оваа датотека содржи типови на податоци со фиксна големина од 2 бајти. Се претпоставува дека датотеката може да биде многу голема (мерена во гигабајти). Влез/излез операциите да се имплементираат со помош на Stream-ови.
Метод: byte[] read(long 1)
Опис: Овој метод го чита 1-тиот објект од наведената датотека и го враќа како низа од бајти. Доколку 1-тиот објект не постои во датотеката, се праќа пі11. Доколку датотеката не постои се фрла исклучок од типот Datab
Метод void write(long 1, byte[] bj)
Опис: Овој метод го запишува 1-тиот објект во наведената датотека. Доколку позицијата на објектот што треба да се запише е понапред од големината на датотеката (на пример датотеката има 3 објекти, а ние сакаме да го запишеме 5-тиот), тогаш од последниот објект во датотеката до тиот запишуваме празни објекти. Празен објект е составен од 2 нули. Доколку датотеката не постои, таа се креира
Your solution file



ТЕРМИН 2
1.
Напишете ги следните методи кои работат со бинарната датотека db.dat. 
Оваа датотека содржи типови на податоци со фиксна големина од 16 бајти. 
Се претпоставува дека датотеката може да биде многу голема (мерена во гигабајти). 
Влез/излез операциите да се имплементираат со помош на RandomAccessFile.

Метод: byte[] read(long i)
Опис: Овој метод го чита i-тиот објект од наведената датотека и го враќа како низа од бајти. 
Доколку i-тиот објект не постои во датотеката, се враќа null. 
Доколку датотеката не постои се фрла исклучок од типот DatabaseNotFound.

Метод: void write(long i, byte[] obj)
Опис: Овој метод го запишува i-тиот објект во наведената датотека. 
Доколку позицијата на објектот што треба да се запише е понапред од големината на датотеката
 (на пример датотеката има 3 објекти, а ние сакаме да го запишеме 5-тиот), 
тогаш од последниот објект во датотеката до i-тиот запишуваме празни објекти. 
Празен објект е составен од 16 нули. Доколку датотеката не постои, таа се креира.

2.
Синхронизација
(30 поени) Од приватно училиште ве ангажираат за синхронизација на процесот на 
одржување на завршен испит, 
каде професорите ќе го изведуваат испитот во една просторија. 
Испитот се одржува во повеќе термини, 
каде во секој термин мора да биде присутен еден професор и 50 студенти. 
По завршувањето на терминот, 
од просторијата прво излегуваат студентите и професорот, 
а потоа влегува нов професор и нови 50 студенти.

Притоа важат следните услови:
Во просторијата може да има само еден професор и точно 50 студенти.
Студентите не смеат да влезат ако во просторијата нема професор
Студентите не смеат да излезат додека професорот не каже дека испитот завршил
Професорот не може да излезе додека има студенти во просторијата
Просторијата иницијално е празна

Вашата задача е да го синхронизирате претходното сценарио.
Во почетниот код кој е даден, дефинирани се класите Teacher и Student, кои го симболизираат однесувањето 
на професорите и студентите, 
соодветно. Има повеќе инстанци од двете класи кај кои методот execute() се повикува само еднаш.
Во имплементацијата, можете да ги користите следните методи од веќе дефинираната променлива state:

state.teacherEnter()
Означува дека професорот влегува во училницата.
Се повикува од сите професори.
Доколку училницата не е празна во моментот на повикувањето, ќе се јави исклучок.

state.studentEnter()
Означува дека студентот влегува во училницата.
Се повикува од сите студенти.
Доколку нема професор во училницата (претходно не е повикан state.teacherEnter()),
или има повеќе од 50 студенти внатре, ќе се јави исклучок.
Доколку студентите не влегуваат паралелно (повеќе истовремено), ќе јави исклучок.

state.distributeTests()
Го симболизира делењето на тестови на студентите и започнувањето на испитот.
Се повикува од сите професори по влегувањето на сите 50 студенти.
Доколку нема 50 присутни студенти во училницата, ќе се јави исклучок.

state.examEnd()
Го симболизира истекувањето на времето за испитот.
Се повикува од сите професори.
Доколку претходно не е повикан state.distributeTests(), ќе јави исклучок.

state.studentLeave()
Го симболизира излегувањето на студентот од училницата.
Се повикува од сите студенти.
Доколку се повика пред state.examEnd(), или ако претходно излегол професорот, 
ќе се јави исклучок.

state.teacherLeave()Го симболизира излегувањето на професорот од училницата.
Се повикува од сите професори.


Доколку методот се повика, а сеуште има студенти во училницата, ќе добиете порака за грешка.
За решавање на задачата, преземете го проектот со клик на копчето Starter file, отпакувајте го и отворете го со Eclipse или Netbeans.
Претходно назначените методи служат за проверка на точноста на сценариото и не смеат да бидат променети и мораат да бидат повикани.
Вашата задача е да го имплементирате методот execute() од класите Teacher и Student, кои се наоѓаат во датотеката ExamSynchronization.java. При решавањето можете да користите семафори и монитори по ваша желба и нивната иницијализација треба да ја направите во init() методот.
При стартувањето на класата, сценариото ќе се повика 10 пати, со креирање на голем број инстанци од класите, при што секоја инстанца ќе го повика својот execute() метод точно еднаш.
Напомена: Поради конкурентниот пристап за логирањето, можно е некои од пораките да не се на позицијата каде што треба да се. Токму затоа, овие пораки користете ги само како информација.

3.
UNIX команди
а) (5 поени) Напишете UNIX команда која ќе ги прикажете сите детали за тековно 
активните процеси 
на корисниците чие корисничко име започнува на четири цифри. 
Командата снимете ја во датотека zad3a-t2.sh, во вашиот домашен именик 
на os.finki.ukim.mk серверот.

б) (10 поени) Напишете UNIX команда со која ќе ги прикажете корисничките имиња на 
корисници кои се најавиле на серверот 
во текот на четврток, 18 јуни. Листата да биде нумерички сортирана 
и да не содржи дупликати. 
Командата снимете ја во датотека zad3b-t2.sh, во вашиот домашен именик на os.finki.ukim.mk серверот.
UNIX командна процедура

(25 поени) Да се напише командна процедура која во даден именик (прв аргумент) 
и сите негови подименици рекурзивно ќе ги пронајде сите датотеки модифицирани 
во даден временски интервал (втор аргумент). 
За секоја од пронајдените датотеки треба да се изброи колку пати се користат 
командите за филтрирање на текст и тој број да се 
додаде на крајот на самата датотека.
Направете проверка дали се проследени потребните аргументи и доколку не се, 
прикажете соодветно упатство за употреба. 
Доколку изворниот именик не постои, скриптата треба да го извести корисникот за 
тоа и да заврши неуспешно. 
Да се внимава вториот аргумент на скриптата да биде во форматот "X – Y", 
каде X и Y означуваат час (на пример: "10 – 16", значи од 10:00 до 16:59 часот).
Командната процедура снимете ја под името zad4-t2.sh, 
во вашиот домашен именик на os.finki.ukim.mk серверот.
