1.
Java I/O

(30 поени) Потребно е рекурзивно да го изминете директориумот in. Доколку при листањето дојдете до Датотека со екстензија bin потребно е да ги направите следните работи:
Доколку големината на датотеката е помала од 10 килобајти, ископирајте ја датотеката во директориумот out. Доколку датотеката веќе постои во директориумот out, тогаш испишете на екран
"datotekata IME NA DATOTEKA vekje postol".Доколку големината на датотеката е еднаква или поголема од 10 килобајти, тогаш нејзината бодржина додадете ја на почеток од датотеката big.bin 80 out директориумот.
Доколку директориумот 1 не постои, испечатете порака "in ne postoi" и завршете со работа. Директориумот out на почеток на работата треба да биде празен.
Имајте во предвид дека bin датотеките се бинарни датотеки кои може да бидат многу големи (десетици гигабајти). Бараниот код напишете го во метода void work(String in value, String out_value) при што наведените in и out директориуми ќе бидат вредностите на стринговите in value и out value.
За тестирање повикајте го овој метод од main() со вредности "in" и "out" за двата стринга. Креирајте тест примери за 5 и от директориумите за да ја проверите наведената функционалност.
Your solution file

2.
UNIX командни процедури
Да се напишат командни процедури за следните барања:
а) (20 поени) да се направи листање во вид на мени за тековниот именик. Менито треба да содржи три опции и тоа:
листање на сите извршни командни процедури (скрипти):
2. листање на датотеките креирани или модифицирани од даден корисник (корисникот се чита од тастатура):
3. листање на најавените корисници на системот чие што корисничко име е од формат со 2 букви и 4 цифри.
Командната процедура снимете ја под името zad3a-t2.sh. Во вашиот домашен именик на os. finki.ukim.mk серверот.
6) (20 поени) Напишете UNIX скрипта со која ќе споите две датотеки. Имињата на датотеките се предаваат како аргументи на командна линија.
Треба да се провери дали содржината на датотеките е иста или не. Доколку е иста, втората датотека треба да се избрише. 
Доколку не е иста, треба на првата датотека да се додаде втората датотека во продолжение и новокреираната датотека да се сними под име ImeDatotekal imeDatoteka2.txt.
Направете проверка дали се проследени потребните аргументи и доколку не се, прикажете соодветно упатство за употреба. Доколку предадените аргументи не се датотеки, скриптата
треба да го извести корисникот за тоа и да заврши неуспешно.
Командната процедура снимете ја под името zаd3b-t2.sh, во вашиот домашен именик на os. finki.ukim.mk серверот.
Your solution file
a)
#!/bin/bash
echo "1. Листање на сите извршни командни процедури (скрипти)"
echo "2. Листање на датотеките креирани или модифицирани од даден корисник"
echo "3. Листање на најавените корисници чие корисничко име е од формат со 2 бу>
read -p "Изберете опција (1/2/3): " option

case  $option in
1)
    echo "Извршни скрипти во тековниот именик:"
find . -maxdepth 1 -type f -executable -name "*.sh"
;;
2)
read -p "Vnesete korisnicko ime" user
echo "Datoteki kreirani ili modificirani od $user:"
find  . -user "$user"
;;
3)
echo "najaveni korisnici so format XXNNNN:"
who|awk'{ if($1~/^[a-zA-Z]{2}[0-9]{4}$/) print $1}'
;;
*)
echo"Nevalidna opcija!"
;;
esac
b)
if [ $# != "2" ];then
echo "USAGE: file1 file2"
exit 1
fi

file1=$1
file2=$2

if [ ! -f "$file1" ]; then
echo " file1 ne e datoteka"
exit 1
fi

if [ ! -f "$file2" ];then
echo "file2 ne e datoteka"
exit 1
fi
//cmp=> compare -s=>silent, vrakja 0,1 ili error
if cmp -s "$file1" "$file2";then // ili if [ $(cat "$file1") -eq $(cat "$file2">
echo "Datotekite imaat ista sodrzina"
rm "$file2"
else
/// if file1="example.txt", then file1%.txt becomes example.
new_file="${file1%.txt}_${file2%.txt}.txt"
cat " $file1"" $file2">"$new_file"
fi

3.
UNIX командни процедури
Да се напишат командни процедури за следните барања:
а) (20 поени) Да се направи листање во вид на мени за тековниот именик. Менито треба да содржи три опции и тоа:
процедури
1. листање на командните процедури од тековниот именик;
2. листање на датотеките креирани или модифицирани на тековниот датум:
3. листање на најавените корисници на системот чие што корисничко име е од формат со 6 цифри.
Командната процедура снимете ја под името zad3a-t1.sh, во вашиот домашен именик на os.finki.ukim.mk серверот.
6) (20 поени) Напишете UNIX командна процедура со која ќе споредувате две датотеки. Имињата на датотеките се предаваат како аргументи на командна линија.
Треба да се провери дали содржината на датотеките е иста или не. Доколку е иста, втората датотека треба да се избрише. Доколку не е иста, треба на екран да се испечати број на редови во кои се разликуваат датотеките.
Направете проверка дали се проследени потребните аргументи и доколку не се, прикажете соодветно упатство за употреба. Доколку предадените аргументи не се датотеки, скриптата треба да го извести корисникот за тоа и да заврши неуспешно.
Командната процедура снимете ја под името zad3b-t2.sh, во вашиот домашен именик на os.finki.ukim.mk серверот.
Your solution file
a)
#!/bin/bash
echo "1. листање на командните процедури од тековниот именик;"
echo "2. листање на датотеките креирани или модифицирани на тековниот датум;"
echo "3. листање на најавените корисници на системот чие што корисничко име е о>
read -p "Изберете опција (1/2/3): " option

case in $option
1)find . -maxdepth 1 -type f -name  "*.sh"
;;
2)
find . -maxdepth 1 -type f -daystart -mtime 0
;;
3)
who| awk'{print 1}'|grep -E "^[0-9]{6}$"
;;
*)
echo "Nevaliden izbor"
;;

esac
b)
#!/bin/bash

if [ $# != "2" ];then
echo"USAGE: file1 file2"
exit 1
fi

file1=$1
file2=$2
if [ ! -f  "$file1" ];then
echo " file1 ne e datoteka"
exit 1
fi

if [ ! -f "$file2" ];then
echo " file2 ne e datoteka"
exit 1
fi
if cmp  -s "$file1" "$file2";then
echo "Sodrzinata e ista"
rm "$file2"
else
echo "Broj na razlicni redovi:$(diff -y --suppress-common-lines "$file1""$file2>
fi



4.
Синхронизација
Rernaining time: 01:41:40 Opened. 0-1:0
(30 поени) Од ФЧИНКИ не ангажираат за синхронизација на процесот на пренос на студенти на екскурзија, каде повеќе возачи пренесуваат студенти со ист автобус. Екскурзијата се изведува во повеќе термини, каде во секој термин мора да биде присутен возач и 50 студенти. По завршувањето на терминот, од автобусот прво излегуваат студентите и возачот, а потоа влегува нов вс нови 50 студенти.
Притоа важат следните услови:
Во автобусот може да има само еден возач и точно 50 студенти.
Студентите не смеат да влезат ако по автобусот нема возач
Студентите не смеат да излезат додека возачот не каже дека автобусот пристигнал
Возачот не може да излезе додека има студенти во автобусот
Автобусот иницијално е празен
Вашата задача е да го синхронизирате претходното сценарио.
Во почетниот код кој е даден, дефинирани се класите Delver и Student, кои го симболизираат однесувањето на возачите и студентите, соодветно. Има повеќе инстанци од двете класи кај кои методот execute() се повикува само еднаш.
Во имплементацијата, можете да ги користите следните методи од веќе дефинираната променлива state:
state.driverEnter()
• Означува дека возачот влегува во автобусот.
• Се повикува од сите возачи,
• Доколку автобусот не е празен во моментот на повикувањето, ќе се јави исклучок.
state studentEnter()
• Означува дека студентот влегува во автобусот.
• Се повикува од сите студенти.
• Доколку нема возач во автобусот (претходно не е повикан state.driverEnter()). Или има повеќе од 50 студенти вна ќе се јави исклучок.
• Доколку студентите не влегуваат паралелно (повеќе истовремено), ќе јави исклучок.
state.busDeparture()
• Го симболизира тргнувањето на автобусот.
• Се повикува од сите возачи по влегувањето на сите 50 студенти.
• Доколку нема 50 присутни студенти во автобусот, ќе се јави исклучок.
state.busArrive()
• Го симболизира пристигнувањето на автобусот.
• Га пляшкива па сите возача
state.studentEnter()
• Означува дека студентот влегува во автобусот.
• Се повикува од сите студенти.
• Доколку нема возач во автобусот (претходно не е повикан state, driverEnter() ), или има повеќе од 50 студе ќе се јави исклучок.
• Доколку студентите не влегуваат паралелно (повеќе истовремено), ќе јави исклучок.
state.busDeparture()
• го симболизира тргнувањето на автобусот.
• Се повикува од сите возачи по влегувањето на сите 50 студенти.
• Доколку нема 50 присутни студенти во автобусот, ќе се јави исклучок.
state.busArrive()
• Го симболизира пристигнувањето на автобусот.
• Се повикува од сите возачи.
• Доколку претходно не е повикан state. busDeparture(), ќе јави исклучок..
state.studentLeave()
• Го симболизира излегувањето на студентот од автобусот.
• Се повикува од сите студенти.
• Доколку се повика пред state. busArrive(), или ако претходно излегол возачот, ќе се јави исклучок.
state.driverLeave()
• го симболизира излегувањето на возачот од автобусот.
• Се повикува од сите возачи.
• Доколку методот се повика, а сеуште има студенти во автобусот, ќе добиете порака за грешка.
За решавање на задачата, преземете го проектот со клик на копчето Starter file, отпакувајте го и отворете го со Eclip Netbeans.
Претходно назначените методи служат за проверка на точноста на сценариото и не смеат да бидат променети и мораат повикани.
