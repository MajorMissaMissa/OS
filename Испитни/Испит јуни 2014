1.
Java I/O (јунска сесија)
Потребно е да ја имплементирате функцијата manage (String in, String out) која врши организација на текстуалните датотеки (*.dat) од именикот in според нивните привилегии на следниот начин:
доколку датотеката има привилегии за запишување тогаш таа треба да се премести во out именикот. При преместувањето, во конзола испечатете pomestuvam и апсолутното име на датотеката која се копира.
доколку датотеката нема привилегии за запишување тогаш нејзината содржина додадете ја на крај од датотеката writable-content.txt BO resources именикот. При додавањето, во конзола испечатете dopisuvam и апсолутното име на датотеката. Сметајте дека овие датотеки може да бидат многу поголеми од физичката меморија на компјутерот.
доколку датотеката е скриена (hidden), тогаш избришете ја од in именикот, и во конзола испечатете zbunet sum и апсолутното име на датотеката.
Доколку in именикот не постои, испечатете на екран пe postoi.
Доколку out именикот веќе постои, избришете ја неговата содржина. Претпоставете дека во out именикот има само датотеки.
Your solution file

2.
Потребно е да направите систем за синхронизација на играчи во една сала според следното сценарио:
Во салата истовремено може да влезат најмногу 12 играчи, при што се чекаат меѓусебно се' додека сите не пристигнат и потоа започнуваат со спортување. По завршувањето со спортување, играчите се пресоблекуваат во кабина со капацитет 4. По пресоблекувањето, играчите излегуваат од салата, а последниот го повикува методот state.slobodnasala() за да каже дека салата е слободна. Потоа во салата може да влезат нови 12 играчи и сценариото започнува одново.
Потребно е да ги синхронизирате играчите со користење на следните методи:
state.vlezi() Кажува дека играчот влегол во салата
• Се повикува од сите играчи
• Доколку методот истовремено го повикаат повеќе од 12 играчи, ќе добиете порака за грешка
state.sportuvaj () Кажува дека играчот спортува
• Се повикува кај сите играчи
• Доколку методот се повика, а не се влезени сите 12 играчи, ќе добиете порака за грешка
• Доколку методот истовремено го повикаат повеќе од 12 играчи, ќе добиете порака за грешка
• Доколку методот се извршува секвентно (само еден играч спортува во еден момент), ќе добиете порака за грешка
state.presobleci() Кажува дека играчот се пресоблекува во кабината
• Се повикува кај сите играчи
• Доколку методот истовремено го повикаат повеќе од четири играчи, ќе добиете порака за грешка
•
Доколку методот се извршува секвентно (се пресоблекува само еден во кабината во еден момент), ќе добиете порака за грешка
state.slobodnašala() Кажува дека салата е слободна
• Се повикува само од еден играч (оној кој последен завршил со пресоблекувањето)
• Доколку методот се повика, а со пресоблекувањето не се завршени сите 12 играчи, ќе добиете порака за грешка
• Доколку методот истовремено се повика од повеќе од 1 играч, ќе добиете порака за грешка
За решавање на задачата, преземете го проектот со клик на копчето Starter file, отпакувајте го и отворете го со Eclipse или Netbeans.
Вашата задача е да го имплементирате методот execute() од класата Player, кој се наоѓа во датотеката Gym2Synchronization.java. При решавањето можете да користите семафори и монитори по ваша желба и нивната иницијализација треба да ја направите во init() методот.
При стартувањето на класата, сценариото ќе се повика 10 пати, со креирање на голем број инстанци од класата Player и паралелно само
еднаш ќе се повика нивниот execute() метод.


3.
(40 поени) Командни процедури
а) (15 поени) Напишете командна процедура која прима два аргументи: file1 и file2. Скриптата треба да провери дали двете датотеки имаат иста содржина. Доколку датотеките имаат иста содржина, скриптата треба да го извести 
корисникот за тоа и да ја избрише втората датотека. Притоа треба да го извести корисникот за тоа дали бришењето успеало или не. Доколку двете датотеки се различни по содржина, тогаш скриптата треба само да отпечати
соодветна порака за корисникот.
Скриптата треба да проверува дали корисникот ја повикал со точен број аргументи. Доколку бројот на аргументи е погрешен, потребно е да се испише упатство за користење и да заврши скриптата неуспешно. Исто така, скриптата 
треба да провери дали датотеките постојат. Доколку макар една од нив не постои, скриптата треба тоа да му го соопшти на корисникот и да заврши неуспешно.
Скриптата зачувајте ја во домашниот именик, под име zada-t1.sh.
Пример за користење на скриптата: zad3a-ti sh myfiles/a.txt b.txt

6) (25 поени) Напишете командна процедура која на дадена локација (прв аргумент на скриптата) ќе ги пронајде сите shell
командни процедури и ќе провери дали корисникот има привилегии за нивно извршување (ќе се отпечатат соодветни пораки за секоја од скриптите. Доколку корисникот нема привилегии за извршување на пронајдената скрипта, 
вашата скрипта треба да ги додаде овие привилегии и да го извести корисникот за успешноста на промената.
Напомена: Наставката не секогаш е доволен индикатор за содржината на датотеката или именикот. Проверете ги датотеките дали содржат некоја карактеристика во својата содржина која би ги идентификувала како командни процедури.
Скриптата треба да проверува дали корисникот ја повикал со точен број аргументи. Доколку бројот на аргументи е погрешен. потребно е да се испише упатство за користење и да заврши скриптата неуспешно. Исто така, скриптата 
треба да провери дали локацијата наведена како пре аргумент постои и доколку не треба да го извести корисникот и да заврши неуспешно.
Скриптата зачувајте ја во домашниот именик, под име 6-13..
Пример за користење на скриптата: 30-11.th/os-files
Your solution file

а)
#!/bin/bash

if [ $# -ne 2 ];then
echo "USAGE: file1 file2"
exit 1

file1=$1
file2=$2

if [ ! -f "$file1" ];then
echo "file1 doesn't exist!"
exit 1
fi

if [ ! -f "$file2" ];then
echo "file2 doesn't exist!"
exit 1
fi

if cmp -q "$file1" "$file2";then
echo "file1 and file2 are same!"
rm "$file2"
if [ $? -eq 0 ];then
echo "file2 was successfully removed."
else
echo "file2 was not successfully removed."
fi
else
echo "file1 and file2 are diffrent."
fi

6)

if [ $# -ne 1 ];then
echo "USAGE: <directory-path>"
exit 1
fi

directory=$1
if [ ! -d "$directory" ];then
echo "Error: Directory '$directory' does not exist."
exit 1
fi

for file in "$directory"/*;do

if [ ! -f "$file" ];then
continue
fi

if head -n 1 "$file" | grep -q "^#!.*sh";then
if [ -x "$file" ];then
echo "User has execute premissions"
else
chmod +x "$file"
if [ #? -eq 0 ];then
echo "Execute permissions added succesfully"
else
echo "Failed to add execute permissions"
fi
fi
fi
done
exit 0
