Оперативни Системи - Практичен Дел (Јунска Сесија) 2024

Задача 1 - Docker
Дадена е Java апликација која треба да се контејнеризира и да се распореди со помош на Docker Compose. Целосната конфигурација се состои од два сервиси: Java апликација и 
MySQL база на податоци. Треба да ги пополнете датотеките Docker-app и docker-compose.yml за да го постигнете горенаведеното сценарио.
Некои делови од датотеките Docker-app и docker-compose.yml се испуштени и треба да ги пополните празнините за да создадете целосно функционално поставување.

Структура на проектот:
my-app/
|----- docker-compose.yml
|----- java-app/
|     |----- Dockerfile-app
      |----- src/
      |                 |_ WebApp.java
|----- data/
|     |----- start.sql

Појаснување:
Датотеката docker-compose.yml се наоѓа во my-app директориумот.
Патеката до кодот на апликацијата Java и Dockerfile-от е: my-app/java-app
Постоечка слика на Docker Hub за MySQL: mysql:8.4

#Dockerfile-app
Повлечете ја сликата eclipse-temurin со најнова верзија
FROM eclipse-temurin:latest                                                
Ископирајте ја WebApp.java апликацијата на локација /app во контејнерот
COPY  src/WebApp.java /app/                                               
Поставете го моменталниот работен директориум на /app
WORKDIR /app                                                   
Ископирајте ја апликацијата со користење на командата javac
RUN javac WebApp.java                                                   
Овозможете апликацијата да слуша на порта 8000
EXPOSE 8000                                                  
Стартувајте ја апликацијата
CMD["java","WebApp"]                                                                                        

#docker-compose.yml
За овој дел немам запишано како точно беше но беше во ист формат како за #Dockerfile-app само наместо text-input полиња беа select со понудени одговори.
Нешто вака беше (не е релевантно со задачата):


Задача 2 - Скрипта во UNIX
Date                             Time                    Status              Module Affected          Message
2024-06-24               10:15:32              DEBUG            DB                                     User john logged in

Потребно е да напишете скрипта која ќе даде определени информации за логовите:

1) број на логови кои имаат статус еднаков на првиот аргумент предаден на скриптата, а се креирани во месецот кој е предаден како втор аргумент на скриптата во формат YYYY-MM
доколку не се предадени 2 аргументи да се испечати порака со правилно користење Usage: script.sh <STATUS> <MONTH>
доколку форматот на месецот не е правилен да се испечати порака со прикажен правилен формат

2) IP адресата која се појавува најчесто кај логовите кои имаат статус еднаков на првиот аргумент предаден на скриптата
доколку не е предаден аргументот повторно да се испечати истата порака за правилно користење како кај барањето под 1.

3) Статистиката на појавувањата на логовите кај различните статуси во соодветен месец.

Сите логови се чуваат во датотека со име system_logs.tsv која може да ја преземете тука

Пример output (не е како во датотеката):

Number of logs with status 'INFO' in month 2024-08: 2
Most common IP address for logs with status 'INFO': 192.168.1.49
Count per status for month 2024-08:
DEBUG: 1
INFO: 2
WARN: 6
ERROR: 3

Задача 3 - СИНХРОНИЗАЦИЈА
Потребно е да се направи имлементација на серверскиот дел на мрежната апликација „Last word“ која ќе го имплементира следното сценарио:

1) Клиентот воспоставува конекција со серверот со тоа што праќа Login порака за ракување преку праќање на стрингот HANDSHAKE
2) Серверот ја прима пораката и враќа потврда со тоа што го праќа стрингот Logged In <IP_OF_CLIENT>
3) Клиентот започнува со праќање на пораки во текстуален формат кои се состојат само од еден збор (без празни места) и мора да завршуваат со нов ред
4) За секоја од добиените пораки, серверот проверува дали таков веќе е сретнат во неговата комуникација. Доколку не е сретнат го додава во низа од познати зборови и го инкрементира 
бројачот на познати зборови. На клиентот му враќа порака од ист збор што го добил проследена со IMA доколку таков збор веќе сретнал или NEMA доколку прв пат го добива тој збор
5) Секој нов збор да се запише на крајот на текстуален фајл, заедно со време на пристигање и IP адреса. Името и локацијата на лог фајлот се дадени како опкружувачка променлива WORDS_FILE
6) Штом серверот добие порака STOP од страна на клиентот, му испраќа тековен број на познати зборови на серверот, по што праќа порака LOGGED OUT. После ова серверот ја затвора конекцијата.

Серверот треба да работи на порта 7391 и да се направи да опслужува неограничен број на клиенти. Да се внимава на синхронизацијата на споделени ресурси. Класите за Server.java и
Worker.java да се прикачат во празното поле долу.
