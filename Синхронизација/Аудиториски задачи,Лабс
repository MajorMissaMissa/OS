1.
Задача1: Producer - Controller
 ● Проблем: Producer–Controller, со ограничен број 
проверки.​
 ● Потребно е да направите оптимизација на додавањата и 
проверките на податоците од одреден бафер според 
следните услови:​
 ● Кога се додава податок во баферот, во истиот момент:​
 ○ Не може да има додавање на други податоци​
 ○ Не може да се прави проверка на податоци​
 ● Кога се прави проверка на податоци, во истиот момент:​
 ○ Може да има максимум 10 активни проверки​
 ○ Не може да има додавање пред да завршат сите 
започнати проверки​
 ● Иницијално во баферот има податоци.​
Задача1: Producer - Controller
 ● Баферот е претставен со инстанцата buffer од класата 
Buffer. Притоа може да ги користите следните методи:​
 ○ state.produce()
 ■ Додава елемент во баферот.​
 ■ Фрла RuntimeException со соодветна порака 
доколку во истиот момент се врши додавање или 
проверка на друг податок.
 ○ state.check()
 ■ Врши проверка на податок од баферот.​
 ■ Проверува дали во истиот момент се врши 
додавање или паралелна проверка на повеќе од 
10 податоци.​
Задача1: Producer - Controller
 ● Имплементирајте ги методите execute() од класата Producer и Controller, 
кои ќе функционираат според претходните правила. ​
 ● Тие треба да ги користат методите state.produce() и  state.check() за 
додавање и проверка на податоци од баферот, соодветно. ​
 ● Сите семафори и глобални променливи треба да ги дефинирате самите, 
а нивната иницијализација да ја направите во методот init(). ​
 ● При имплементацијата на методите, не смеете да додадете try-catch 
блокови во методите. (Важно при тестирањето)​
 ● При извршувањето има повеќе инстанци од класите Producer и 
Controller, кои вршат повеќе од едно додавање и проверка, соодветно. ​
 ● Додавањата и проверките се стартуваат (скоро) истовремено и 
паралелно се извршуваат.

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ProducerController {
    static int MAX_PRODUCTION=50;
static Semaphore addingInBuffer;
static Semaphore checkingData;
static Lock lock;
    static int numControllers = 0;
public static void init(){
    addingInBuffer=new Semaphore(1);
    lock=new ReentrantLock();
    checkingData=new Semaphore(10);
}
public static class Buffer{
private boolean producing=false;
private int checking=0;
    public  void produce(){
producing=true;
if (checking>0){
   throw new RuntimeException("Can't produce if someone is checking... ");

}
        System.out.println("Producing...");
producing=false;
    }
    public  void check(){
checking++;
if (producing){
    throw  new RuntimeException("Can't check if there is producing...");
}
        if (checking>10){
            throw  new RuntimeException("Can't check more than 10 processes...");
        }

        System.out.println("Controler is checking...");
    checking--;
    }

}

    public static class Producer extends Thread{
private final Buffer buffer;
public Producer(Buffer b){
    buffer=b;
}
public void execute() throws InterruptedException{
    addingInBuffer.acquire();
    buffer.produce();
    addingInBuffer.release();
}

@Override
        public void run(){
    for (int i = 0; i <MAX_PRODUCTION ; i++) {
        try {
            execute();
        } catch (InterruptedException io) {
            io.printStackTrace();
        }
    }
}
    }
    public static class Controller extends Thread{
private final Buffer buffer;
public Controller(Buffer b){
    buffer=b;
}

public void execute() throws InterruptedException{
    lock.lock();
    if (numControllers==0){
        addingInBuffer.acquire();
    }
numControllers++;
    lock.unlock();

    checkingData.acquire();
    buffer.check();

    lock.lock();
    numControllers--;
checkingData.release();
if (numControllers==0){
    addingInBuffer.release();
}
lock.unlock();
}
public void run(){
    for (int i = 0; i <MAX_PRODUCTION ; i++) {
        try {
            execute();
        } catch (InterruptedException io) {
            io.printStackTrace();
        }
    }
}
    }
    public void main(String[] args){
Buffer buffer=new Buffer();
Producer p=new Producer(buffer);
        List<Controller>controllers=new ArrayList<>();
        for (int i = 0; i <100 ; i++) {
            controllers.add(new Controller(buffer));
        }
p.start();
        for (int i = 0; i <100 ; i++) {
            controllers.get(i).start();
        }
    }
}


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

2.
● Да се имплементира синхронизација на проблемот со 
произведувач и потрошувач. Притоа, имаме еден 
произведувач кој поставува ставки во бафер и 
произволен број на потрошувачи кои паралелно ги 
земаат поставените ставки.​
 ● Иницијално баферот е празен.​
Задача 2: Произведувач- Потрошувач
 ● Произведувачот врши полнење на баферот со користење на 
функцијата state.fillBuffer();
 ● Потрошувачот ја зема ставката наменета за него со методот 
state.getItem(int id);
 ● Потрошувачот ја зема само ставката наменета за него, по 
што чека ново полнење на баферот.
 ● По земањето на ставката од баферот, потрошувачот треба 
повика state.decrementNumberOfItemsLeft() за да каже дека ја 
земал ставката.​
 ● Потрошувачот кој ќе ја земе последната ставка (го оставил 
баферот празен) му сигнализира на произведувачот за да го 
наполни баферот.​
 ● За проверка дали баферот е празен да се користи 
state.isBufferEmpty();
Задача 2: Произведувач- Потрошувач(Ограничувања)
 ● Треба да се овозможи повеќе потрошувачи паралелно 
да може да си ја земат својата ставка од баферот.​
 ● Паралелно повикување на state.getItem(int id);
 ● Не смее да се повика state.getItem(int id) доколку 
соодветната ставка претходно е земена и не е 
поставена.​
 ● Не смее да се повика state.fillBuffer()доколку има ставки 
во баферот.​
 ● Повиците state.isBufferEmpty()и 
state.decrementNumberOfItemsLeft()го модифицираат 
тековниот број на ставки во баферот.​
Задача 2: Произведувач- Потрошувач
 ● Да се имплементираат методите init(), Producer.execute() и 
Consumer.execute(), при што ќе се изведе синхронизација за да се 
извршуваат според дефинираните услови.​
 ● При извршувањето има една инстанца од Producer и повеќе инстанци од 
Consumer класата кои се извршуваат паралелно. ​
 ● Претпоставете дека методот execute() и кај двете класи се повикува во 
бесконечна while јамка. ​
 ● Решение:​
 ● Кодот е поставен на курсот

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class ProizveduvacPotrosuvac {
    static final int NUM_RUNS=100;
    static final int NUM_CONSUMERS=50;
    static Lock lock;
static Semaphore isBufferEmpty;
static Semaphore[] item;
public static void init(){
    lock=new ReentrantLock();
    isBufferEmpty=new Semaphore(1);
    item=new Semaphore[NUM_CONSUMERS];
    for (int i = 0; i <NUM_CONSUMERS ; i++) {
        item[i]=new Semaphore(0);
    }
}
static class Buffer{
private final int numConsumers;
public Buffer(int numConsumers){
    this.numConsumers=numConsumers;
}
private int numItems=0;
public int getBufferCapacity(){
    return numConsumers;
}
public void fillBuffer(){
if (numItems!=0){
    throw new RuntimeException("The buffer is not empty...");
}
numItems=numConsumers;
    System.out.println("The buffer is full...");
}
public void decrementNumberOfItemsLeft(){
if (numItems<=0){
    throw new RuntimeException("Can't decrement, there is no items...");
}
numItems--;
}
public boolean isBufferEmpty(){
   return numItems==0;
}
    public void getItem(int consumerID){
        System.out.println(String.format("Get item for consumer with id: %d",consumerID));
    }
}
public static class Producer extends Thread{
private Buffer buffer;
public Producer (Buffer b){
    buffer=b;
}
    public void execute()throws InterruptedException{
isBufferEmpty.acquire();
lock.lock();
buffer.fillBuffer();
lock.unlock();

        for (int i = 0; i <NUM_CONSUMERS ; i++) {
            item[i].release();
        }
    }
@Override
    public void run(){
    for (int i = 0; i <NUM_CONSUMERS ; i++) {
        try {
            execute();
        }catch (InterruptedException io){
            io.printStackTrace();
        }
    }
}

}

public static class Consumer extends Thread{
private Buffer buffer;
private int consumerID;
    public Consumer(int consumerId, Buffer buffer) {
        this.buffer = buffer;
        this.consumerID = consumerId;
    }

public void execute()throws InterruptedException{
        
item[consumerID].acquire();
buffer.getItem(consumerID);
lock.lock();
buffer.decrementNumberOfItemsLeft();
if (buffer.isBufferEmpty()){
    isBufferEmpty.release();
}
lock.unlock();
}
@Override
    public void run(){
    for (int i = 0; i <NUM_RUNS ; i++) {
        try{
            execute();
        }catch (InterruptedException io){
            io.printStackTrace();
        }
    }
}
}
public static void main(String[] args){
    init();
    Buffer buffer=new Buffer(NUM_CONSUMERS);
    Producer p=new Producer(buffer);
    List<Consumer>consumers=new ArrayList<>();
    for (int i = 0; i <NUM_CONSUMERS ; i++) {
consumers.add(new Consumer(i,buffer));
    }

    for (int i = 0; i < NUM_CONSUMERS; i++) {
        consumers.get(i).start();
    }
}

}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
3.
Паралелнопребарувањеи броење
 Да се имплементирапаралелнопребарувањена броеви низголема
 низа. Се бара колкупатисе појавува даденбројs воцелатаниза. Со цел
 побрзо пребарување, низата се делина t број еднакви делови, кадеt е 
бројот на стартувани нитки.
 Откакосите ниткиќезавршат со броење, главната ниткапечети колкупати
 е најден бараниот број вонизата. На крајниткатакоја ги нашла најголемиот
 број на појавувањаво својот дел го печатитоа на излез.
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.locks.Lock;

public class ElementCount {

    static long count = 0;
    static long max = 0;
    static Lock lock = new ReentrantLock();
    static Semaphore done = new Semaphore(0);
    static Semaphore canCheckMax = new Semaphore(0);

    static final BoundedRandomGenerator random = new BoundedRandomGenerator();
    private static final int ARRAY_LENGTH = 10000;
    private static final int NUM_THREADS = 10;

    private static final int SEARCH_TARGET = 5;  // This is the target element we are looking for

    // TODO: Define sychronization elements and initialize

    // DO NOT CHANGE
    public static int[] getSubArray(int[] array, int start, int end) {
        return Arrays.copyOfRange(array, start, end);
    }

    public static void main(String[] args) throws InterruptedException {

        int[] arr = ArrayGenerator.generate(ARRAY_LENGTH, SEARCH_TARGET);

        // TODO: Make the SearchThread class a thread and start 10 instances
        // Each instance should take a subarray from the original array with equal length

        List<CountThread> countThreads = new ArrayList<>();
        int elementsPerThread = arr.length / NUM_THREADS;

        for (int i = 0; i < NUM_THREADS; i++) {
            int[] subarray = getSubArray(arr, i * elementsPerThread, (i+1) * elementsPerThread);
            countThreads.add(new CountThread(subarray, SEARCH_TARGET));
        }

        for (CountThread countThread : countThreads) {
            countThread.start();
        }

        // all threads done
        done.acquire(NUM_THREADS);
        canCheckMax.release(NUM_THREADS);

        // check max count
        // TODO: Start the 10 threads


        // DO NOT CHANGE

        System.out.println("The number of total counted elements is: " + count);
        System.out.println("The generated number of elements is: " + ArrayGenerator.elementCount);

        // TODO: The max thread should print the number of occurences

    }

// TO DO: Make the SearchThread class a thread
// You can add methods or attributes if necessary
    static class CountThread extends Thread {

        private int[] arr;
        private int target;


        public CountThread(int[] arr, int target) {
            this.arr = arr;
            this.target = target;
        }

        public void countElements() {
            for (int num: this.arr) {
                if (num == target) {
                    count++;
                }
            }
        }

        public void countElementsParallel() throws InterruptedException {
            // TO DO: Implement and run the parallel counting method from the thread
            int localCount = 0;
            for (int num: this.arr) {
                if (num == target) {
                    localCount++;
                }
            }

            lock.lock();
            count+=localCount;
            if (localCount > max) {
                max = localCount;
            }
            lock.unlock();

            // i'm done
            done.release();
            // request to check count
            canCheckMax.acquire();
            if (localCount == max) {
                System.out.printf("Thread with id %d counted max %d\n", threadId(), localCount);
            }

        }

        public void run() {
            try {
                countElementsParallel();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }


    //************ DO NOT CHANGE ************//
    static class BoundedRandomGenerator {
        static final Random random = new Random();
        static final int RANDOM_BOUND = 100;

        public int nextInt() {
            return random.nextInt(RANDOM_BOUND);
        }

    }

    static class ArrayGenerator {

        static int elementCount;

        static int[] generate(int length, int target) {
            int[] array = new int[length];

            for (int i = 0; i < length; i++) {
                int element = ElementCount.random.nextInt();

                if (element == target) {
                    elementCount++;
                }

                array[i] = element;
            }

            return array;
        }
    }
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
4.
Ве најмуваат од шоуто „Танц со студентите“, да имплементирате софтвер кој автоматски ќе ги контролира портите за насочување на натпреварувачите.

Влезната порта директно води кон една од гардеробите, каде учесниците треба да се пресоблечат. Притоа, во секоја од двете гардероби може паралелно да влезат повеќе учесници од ист пол, но не повеќе од 10.

По пресоблекувањето, учесниците чекаат да дојде произволен партнер, по што излегуваат од соблекувалната и влегуваат во салата за танцување. Во салата паралелно може да танцуваат максимум три пара. 
По завршувањето на танцот, паровите излегуваат од салата по што може да влезе нов пар на нивно место.

Во почетниот код, дефинирани се класите Masko и Zensko, кои ги симболизираат учесниците од соодветниот пол. Од секој од типовите роботи паралелно се активни повеќе инстанци, кои може да танцуваат само 
еднаш.

Во имплементацијата, можете да ги користите следните методи од веќе дефинираната променлива show:

show.presobleci() Го симболизира влегувањето во соблекувалната на учесниците и нивното пресоблекување Не смее паралелно да биде повикан повеќе од 10 пати од исти пол на учесници show.tancuvaj() 
Го симболизира почетокот на танцот Се повикува само од машките учесници, бидејќи тие водат при танцувањето Машкото пред повикот, треба да се осигура дека е присутна учесничка која ќе му биде партнерка 
Не смее да има повеќе од три паралелни повици на овој метод Претходно назначените методи манипулираат со споделен ресурс и ниту еден од нив не е атомичен.

Вашата задача е да ги имплементирате методите Masko.ucestvo() и Zensko.ucestvo() и init(). При имплементацијата, не смеете да додадете try-catch блок во нив. Потребните семафори, глобални променливи и 
променливи за состојбата на роботите треба да ги дефинирате самите.

Доколку имате грешка, ќе ја добиете пораката:

Procesot ne e sinhroniziran spored uslovite na zadacata

По што ќе ви се прикаже логот на повикување на акциите и настанатите грешки. Овој лог треба да ви послужи за увидување на тоа каде имате грешка во извршувањето на вашата задача.

Напомена: Поради конкурентниот пристап за логирањето, можно е некои од пораките да не се на позицијата каде што треба да се. Токму затоа, овие пораки користете ги само како информација, но не се 
ослонувајте на нив.


import java.util.*;
import java.util.concurrent.*;

public class TancSoStudentite {
    Queue<Zensko> zenski;
    Semaphore zenskaGarderoba;
    Semaphore maskaGarderoba;
    Semaphore sala;

    public void init() {
        zenski = new LinkedList<>();
        zenskaGarderoba = new Semaphore(10);
        maskaGarderoba = new Semaphore(10);
        sala = new Semaphore(3);
    }

    class Masko extends Thread {
        public void ucestvo() throws InterruptedException {
            maskaGarderoba.acquire(1);
            show.presobleci();
            maskaGarderoba.release(1);

            synchronized (zenski) {
                if (zenski.isEmpty()) {
                    zenski.wait();
                }

                zenski.remove();
            }

            sala.acquire(1);
            show.tancuvaj();
            sala.release(1);
        }

        @Override
        public void run() {
            try {
                ucestvo();
            } catch (InterruptedException e) {
                // Do nothing
            } catch (Exception e) {
                exception = e;
                hasException = true;
            }
        }

        @Override
        public String toString() {
            return String.format("m\t%d", getId());
        }

        public Exception exception = null;
    }

    class Zensko extends Thread {
        public void ucestvo() throws InterruptedException {
            zenskaGarderoba.acquire(1);
            show.presobleci();
            zenskaGarderoba.release(1);

            synchronized (zenski) {
                zenski.add(this);
                zenski.notifyAll();
            }
        }

        @Override
        public void run() {
            try {
                ucestvo();
            } catch (InterruptedException e) {
                // Do nothing
            } catch (Exception e) {
                exception = e;
                hasException = true;
            }
        }

        @Override
        public String toString() {
            return String.format("z\t%d", getId());
        }

        public Exception exception = null;
    }

    public static void main(String[] args) {
        try {
            TancSoStudentite environment = new TancSoStudentite();
            environment.start();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public void start() throws Exception {
        show = new Show();
        init();
        HashSet<Thread> threads = new HashSet<Thread>();
        for (int i = 0; i < BROJ_INSTANCI; i++) {
            Zensko z = new Zensko();
            Masko m = new Masko();
            threads.add(z);
            threads.add(m);
        }

        for (Thread t : threads) {
            t.start();
        }

        boolean valid = true;
        for (Thread t : threads) {
            if (!hasException) {
                t.join();
            } else {
                t.interrupt();
            }
        }
        show.printStatus();

    }

    public class Show {

        public static final int BROJ_GARDEROBA = 10;
        public static final int BROJ_TEREN = 3;
        public static final int TYPE_MASKO = 1;
        public static final int TYPE_ZENSKO = 2;
        public static final int TYPE_UNKNOWN = -1;

        public Show() {
        }

        public int brojMaskiGarderoba = 0;
        public int brojZenskiGarderoba = 0;
        public int brojTancuvanja = 0;
        public int maxMaskiGarderoba = 0;
        public int maxZenskiGarderoba = 0;
        public int maxTancuvanja = 0;

        public void presobleci() throws RuntimeException {
            log(null, "presobleci start");
            Thread t = Thread.currentThread();
            if (t instanceof Masko) {
                synchronized (RANDOM) {
                    brojMaskiGarderoba++;
                    if (brojMaskiGarderoba > 10) {
                        exception("Ne moze da ima poveke od 10 maski vo maskata garderoba.");
                    }
                    if (brojMaskiGarderoba > maxMaskiGarderoba) {
                        maxMaskiGarderoba = brojMaskiGarderoba;
                    }
                }
                waitRandom();
                synchronized (RANDOM) {
                    brojMaskiGarderoba--;
                }
            } else {
                synchronized (RANDOM) {
                    brojZenskiGarderoba++;
                    if (brojZenskiGarderoba > 10) {
                        exception("Ne moze da ima poveke od 10 zenski vo zenskata garderoba.");
                    }
                    if (brojZenskiGarderoba > maxZenskiGarderoba) {
                        maxZenskiGarderoba = brojZenskiGarderoba;
                    }
                }
                waitRandom();
                synchronized (RANDOM) {
                    brojZenskiGarderoba--;
                }
            }
            log(null, "presobleci kraj");
        }

        public void tancuvaj() throws RuntimeException {
            log(null, "tancuvaj start");
            synchronized (RANDOM) {
                brojTancuvanja++;
                if (brojTancuvanja > BROJ_TEREN) {
                    exception("Ne moze paralelno da tancuvaat poveke od 3 para.");
                }

                if (brojTancuvanja > maxTancuvanja) {
                    maxTancuvanja = brojTancuvanja;
                }
            }
            waitRandom();
            synchronized (RANDOM) {
                brojTancuvanja--;
            }
            log(null, "tancuvaj kraj");
        }

        private void waitRandom() {
            try {
                int r;
                synchronized (RANDOM) {
                    r = RANDOM.nextInt(RANDOM_RANGE);
                }
                Thread.sleep(r);
            } catch (Exception e) {
                //do nothing
            }
        }

        private void exception(String message) {
            RuntimeException e = new RuntimeException(message);
            log(e, null);
            hasError = true;
            throw e;
        }

        public int getType() {
            Thread t = Thread.currentThread();
            if (t instanceof Masko) {
                return TYPE_MASKO;
            } else if (t instanceof Zensko) {
                return TYPE_ZENSKO;
            } else {
                return TYPE_UNKNOWN;
            }
        }

        private synchronized void log(RuntimeException e, String action) {
            Thread t = Thread.currentThread();
            if (e == null) {
                actions.add(t.toString() + "\t(a): " + action);
            } else {
                actions.add(t.toString() + "\t(e): " + e.getMessage());
            }
        }

        public synchronized void printLog() {
            System.out.println("Poradi konkurentnosta za pristap za pecatenje, mozno e nekoja od porakite da ne e na soodvetnoto mesto.");
            System.out.println("Log na izvrsuvanje na akciite:");
            System.out.println("=========================");
            System.out.println("(tip m<=>Masko, tip z<=>Zensko)");
            System.out.println("tip\tid\takcija/error");
            System.out.println("=========================");
            for (String l : actions) {
                System.out.println(l);
            }
        }

        public void printStatus() {
            if (!hasError) {
                int poeni = 25;
                System.out.println("Procesot e uspesno sinhroniziran");
                if (show.maxMaskiGarderoba == 1 || show.maxZenskiGarderoba == 1) {
                    System.out.println("\t-no ima maksimum eden ucesnik vo garderobata.");
                    poeni -= 5;
                }
                if (show.maxTancuvanja == 1) {
                    System.out.println("\t-no ima maksimum edna proverka vo eden moment.");
                    poeni -= 5;
                }

                System.out.println("Osvoeni poeni: " + poeni);

            } else {
                System.out.println("Procesot ne e sinhroniziran spored uslovite na zadacata");
                show.printLog();
                System.out.println("Maksimum mozni poeni: 15");
            }

        }

        private List<String> actions = new ArrayList<String>();
        private boolean hasError = false;
    }

    // Konstanti
    public static int BROJ_INSTANCI = 1000;
    public static final Random RANDOM = new Random();
    public static final int RANDOM_RANGE = 3;
    // Instanca od bafferot
    public Show show;
    public boolean hasException = false;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
5.
Потребно е да направите систем за синхронизација на турнир во кошарка, кој се одржува според следните правила:

На турнирот учествуваат 100 кошаркари, кои произволно се групираат во тимови. Во салата истовремено може да влезат најмногу 20 играчи. По влегувањето во салата, секој кошаркар треба да испечат
и Player inside.. Потоа кошаркарите треба да се пресоблечат за што имаат на располагање кабина со капацитет 10, односно може да се пресоблекуваат 10 играчи во исто време. При влегувањето во соблекувалната,
треба да се испечати In dressing room.. По пресоблекувањето, играчите се чекаат меѓусебно. Откако сите ќе завршат со пресоблекувањето, започнуваат со натпреварот, при што сите печатат Game started.. Откако
ќе заврши натпреварот, сите печатат Player done., а последниот го повикува печати Game finished., со што означува дека салата е слободна. Потоа, во салата може да влезат нови 20 играчи и да започне нов 
натпревар.

Во почетниот код кој е даден, дефинирани се класите BasketballTournament и Player. Во main методот од класата BasketballTournament потребно е да стартувате 100 играчи, кои се репрезентирани преку класата
Player. Потоа секој од играчите треба да започне да го извршува претходно дефинираното сценарио во позадина. Однесувањето на играчите треба да го дефинрате во execute методот од Player класата, кој треба 
да се извршува паралелно кај сите играчи. По стартувањето на сите играчи, во main треба да се чека секој од играчите да заврши за 5 секунди (5000 ms). Доколку некој од играчите не заврши за 5 секунди, 
треба да се испечати Possible deadlock! и да се терминира, а доколку сите играчи завршиле во предвиденото време, да се испечати Tournament finished..

Вашата задача е да го дополните дадениот код според барањата на задачата, при што треба да внимавате не настане Race Condition и Deadlock.

import java.util.HashSet;
import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class BasketballTournament {
    public static void main(String[] args){
        HashSet<Player>thread=new HashSet<>();
        for (int i = 0; i <100 ; i++) {
            Player p=new Player();
            thread.add(p);
        }
        thread.forEach(Thread::start);
        thread.forEach(threads->{
            try {
                threads.join(5000);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        thread.stream().filter(Thread::isAlive).forEach(threads -> {
            System.out.println("Possible deadlock!");
            thread.interrupt();
        });

        for (Player player : thread) {
            if (player.isInterrupted()) {
                return;
            }
        }

        System.out.println("Tournament finished.");
    }
}


class Player extends Thread{
    static Semaphore playing=new Semaphore(20);
    static Semaphore dressing=new Semaphore(10);
    static Semaphore game=new Semaphore(0);
static int dressedPlayers=0;
static int donePlayers=0;
static Lock dressedPlayerLock=new ReentrantLock();
static Lock donePlayerLock=new ReentrantLock();
    public void execute() throws InterruptedException {
playing.acquire(1);
        System.out.println("Player inside..");
dressing.acquire(1);
        System.out.println("In dressing room..");
        Thread.sleep(10);
dressing.release();
dressedPlayerLock.lock();
dressedPlayers++;
dressedPlayerLock.unlock();
dressedPlayerLock.lock();
if (dressedPlayers==20){
    game.release(20);
}
donePlayerLock.unlock();
    game.acquire(1);
        System.out.println("Game start..");
Thread.sleep(100);
donePlayerLock.lock();
donePlayers++;
donePlayerLock.unlock();
donePlayerLock.lock();
if (donePlayers==20){
    System.out.println("Game finished..");
    game.release(20);
    donePlayers=0;
    dressedPlayers=0;
}
donePlayerLock.unlock();

    }
@Override
    public void run(){
        try {
            execute();
        }catch (InterruptedException io){
            io.printStackTrace();
        }
}

}
